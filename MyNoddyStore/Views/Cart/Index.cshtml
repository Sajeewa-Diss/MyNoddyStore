@model MyNoddyStore.Models.CartIndexViewModel
@{
    ViewBag.Title = "Supermarket Sweep: Your Cart";
}
@*<style>
    #cartTable td {
        vertical-align: middle;
    }
</style>*@
<h2>Your cart</h2>
<div class="scrollable-table-todo-remove">
    <table id="cartTable" class="table fixed_headers">
        <thead>
            <tr>
                <!-- First column header is not rotated -->
                <th class="itemth"><div><span>Item</span></div></th>
                <th class="rotate-45 priceth"><div><span><br>Price (£)</span></div></th>
                <th class="rotate-45 qntyth"><div><span>Quantity</span></div></th>
                <th class="rotate-45 subtotth"><div><span><br>Subtotal (£)</span></div></th>
                <!-- Last column header is not rotated -->
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var line in Model.Cart.Lines)
            {
                <tr>
                    <td class="text-left itemtd">@line.Product.Name</td>
                    <td class="text-right pricetd">@line.Product.Price.ToString("c0")</td>
                    <td class="text-right qntytd">@line.Quantity</td>
                    <td class="text-right subtottd">
                        @((line.Quantity * line.Product.Price).ToString("c0"))
                    </td>
                    <td>
                        @using (Html.BeginForm("RemoveFromCart", "Cart"))
                        {
                            @Html.Hidden("ProductId", line.Product.ProductID)
                            @Html.HiddenFor(x => x.ReturnUrl)
                            <input class="btn btn-sm btn-warning" type="submit" value="Remove" />
                        }
                    </td>
                </tr>
            }
        </tbody>
        <tfoot>
            <tr class="tablefoot">
                <td class="text-left itemtd">Total:</td>
                <td class="text-right pricetd"></td>
                <td class="text-right qntytd"></td>
                <td class="text-right subtottd">@Model.Cart.ComputeTotalValue().ToString("c0")
                </td>
                <td></td>
            </tr>
        </tfoot>
    </table>
</div>


<div class="text-center">
    <a class="btn btn-primary" href="@Model.ReturnUrl">Continue shopping</a>
    @Html.ActionLink("Checkout now", "CheckoutCaller", null, new { @class = "btn btn-primary" })
</div>

@*//todo make sure this view doesn't oscillate as time changes. todo add flashing buttons*@


@*But in this case, you need to specify custom attributes in the third parameter of @Html.TextBox() for manually rendering the unobtrusive validation HTML.*@
@*<a href="#" class="RefreshQuantity" data-id="@item.RecordId" txt-id="CartItems_@(ix)__Count">Refresh quantity</a>        &nbsp;|&nbsp;*@

<script>
    var countdownCtrl = document.getElementById("countdownClock");
    var remaining = @Html.Raw(Model.CountDownMilliseconds);
    var countDownDate = new Date();
    countDownDate.setMilliseconds(countDownDate.getMilliseconds() + remaining);

    $( window ).on( "load", SetTableClassFn );    //same as calling this:- $( document ).ready( SetTableClassFn );
    $( window ).on( "resize", SetTableClassFn );

    // Update the countdown every quarter of a second (otherwise it lags between page refresh and redirects)
    var xInterval = setInterval(RunCountdown, 250);

    function RunCountdown() { //tbc add this as a central script.
        // Get todays date and time
        var now = new Date().getTime();

        // Find the duration between now and the count down date
        var duration = countDownDate - now;

        // Time calculations for days, hours, minutes and seconds
        //var days = Math.floor(duration / (1000 * 60 * 60 * 24));
        //var hours = Math.floor((duration % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
        //var minutes = Math.floor((duration % (1000 * 60 * 60)) / (1000 * 60));
        var seconds = Math.floor((duration % (1000 * 60)) / 1000);
        var formattedSeconds = seconds.toString().padStart(2, '0');

        // Display the result in the element with id="demo"
        countdownCtrl.innerHTML = formattedSeconds;

        // If the count down is finished, cancel the countdown
        if (duration < 0) {
            clearInterval(xInterval);
            countdownCtrl.innerHTML = "00";
        }
    }

    //for anything smaller than 768 px inclusive, switch to mobile view.
    function SetTableClassFn() {
        if($(window).width() < 768) {
            $('#cartTable').addClass('table-header-rotated');
            $('#cartTable').removeClass('table-header-horiz');
        }else{
            $('#cartTable').addClass('table-header-horiz');
            $('#cartTable').removeClass('table-header-rotated');
        }
    }

</script>

