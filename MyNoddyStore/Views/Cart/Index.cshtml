@model MyNoddyStore.Models.CartIndexViewModel
@{
    ViewBag.Title = "Sports Store: Your Cart";
}
<style>
    #cartTable td {
        vertical-align: middle;
    }
</style>
<h2>Your cart</h2>
<table id="cartTable" class="table">
    <thead>
        <tr>
            <th>Quantity</th>
            <th>Item</th>
            <th class="text-right">Price</th>
            <th class="text-right">Subtotal</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var line in Model.Cart.Lines)
        {
            <tr>
                <td class="text-center">@line.Quantity</td>
                <td class="text-left">@line.Product.Name</td>
                <td class="text-right">@line.Product.Price.ToString("c")</td>
                <td class="text-right">
                    @((line.Quantity * line.Product.Price).ToString("c"))
                </td>
                <td>
                    @using (Html.BeginForm("RemoveFromCart", "Cart"))
                    {
                        @Html.Hidden("ProductId", line.Product.ProductID)
                        @Html.HiddenFor(x => x.ReturnUrl)
                        <input class="btn btn-sm btn-warning"
                               type="submit" value="Remove" />
                    }
                </td>
            </tr>
        }
    </tbody>
    <tfoot>
        <tr>
            <td colspan="3" class="text-right">Total:</td>
            <td class="text-right">
                @Model.Cart.ComputeTotalValue().ToString("c")
            </td>
        </tr>
    </tfoot>
</table>
<div class="text-center">
    <a class="btn btn-primary" href="@Model.ReturnUrl">Continue shopping</a>
    @Html.ActionLink("Checkout now", "CheckoutCaller", null, new { @class = "btn btn-primary" })
</div>

@*//todo make sure this view doesn't oscillate as time changes. todo add flashing buttons*@


@*But in this case, you need to specify custom attributes in the third parameter of @Html.TextBox() for manually rendering the unobtrusive validation HTML.*@
@*<a href="#" class="RefreshQuantity" data-id="@item.RecordId" txt-id="CartItems_@(ix)__Count">Refresh quantity</a>        &nbsp;|&nbsp;*@

<script>
        var countdownCtrl = document.getElementById("countdownClock");
        var remaining = @Html.Raw(Model.CountDownMilliseconds);
        var countDownDate = new Date();
        countDownDate.setMilliseconds(countDownDate.getMilliseconds() + remaining);

        // Update the count down every tenth of a second (otherwise lags between page redirects)
        var x = setInterval(RunCountdown, 100);

        function RunCountdown() {
            // Get todays date and time
            var now = new Date().getTime();

            // Find the duration between now and the count down date
            var duration = countDownDate - now;

            // Time calculations for days, hours, minutes and seconds
            //var days = Math.floor(duration / (1000 * 60 * 60 * 24));
            //var hours = Math.floor((duration % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
            //var minutes = Math.floor((duration % (1000 * 60 * 60)) / (1000 * 60));
            var seconds = Math.floor((duration % (1000 * 60)) / 1000);
            var formattedSeconds = seconds.toString().padStart(2, '0');

            // Display the result in the element with id="demo"
            countdownCtrl.innerHTML = "Checkout1 within " + formattedSeconds + "s";

            // If the count down is finished, cancel the countdown
            if (duration < 0) {
                clearInterval(x);
                countdownCtrl.innerHTML = "EXPIRED";  //todo countdown at this point
            }
        }
    </script>

@*Adding a jQuery AJAX Function for Refreshing Quantity*@
@*We already know the data passed from the custom attributes: date-id and txt-id.
    Creating the client–side AJAX function for refreshing the quantity updates is easy. Just copy the click function for RemoveLink and do some modifications.*@

@*$(".RefreshQuantity").click(function () {
    // Get the id from the link
    var recordToUpdate = $(this).attr("data-id");
    var countToUpdate = $("#" + $(this).attr("txt-id")).val();
    if (recordToUpdate != '') {
        // Perform the ajax post
        $.post("/ShoppingCart/UpdateCartCount", { "id": recordToUpdate, "cartCount": countToUpdate },
            function (data) {
                // Successful requests get here
                // Update the page elements
                if (data.ItemCount == 0) {
                    $('#row-' + data. DeleteId).fadeOut('slow');
                }
                $('#update-message').text(data.Message);
                $('#cart-total').text(data.CartTotal);
                $('#cart-status').text('Cart (' + data.CartCount + ')');
            });
    }*@


@*Add code into the jQuery $(".RefreshQuantity").click(function ()) to set the quantity to zero when input value is empty.*@
@*$(".RefreshQuantity").click(function () {
     // Get the id from the link
     var recordToUpdate = $(this).attr("data-id");

     //Set quantity number to 0 if input value is empty
     var countToUpdate = 0;
     if ($("#" + $(this).attr("txt-id")).val() !== '') {
         countToUpdate = $("#" + $(this).attr("txt-id")).val();
     }

    if (recordToUpdate != '') { ..etc..*@
