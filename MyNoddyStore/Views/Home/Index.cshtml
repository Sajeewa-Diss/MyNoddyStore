@{
    ViewBag.Title = "Home Page";
    Layout = null;
}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <link href="~/Content/main.css" rel="stylesheet" />
    <link href="~/Content/Site.css" rel="stylesheet" />

    <link href="~/Content/ErrorStyles.css" rel="stylesheet" />
    <script src="~/Scripts/jquery-3.3.1.js"></script>
    <title>@ViewBag.Title</title>
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/font-awesome/4.4.0/css/font-awesome.min.css">
    <link rel="icon" href="~/favicon.ico" type="image/x-icon" />
    <link rel="shortcut icon" href="~/favicon.ico" type="image/x-icon" />
</head>
<body>
    <main class="wrapper">
        <div class="heading myUserFontColor">
            <img src="~/images/logo.png" alt="logo" class="logo">
            <h1>MyNoddy MVC Supermarket Sweep</h1>
            <h2>A single-player shopping game.</h2>
        </div>

        <section class="game-intro">
            <p>
                A simple game to showcase an online supermarket created using MVC architecture. Fill your cart in the time available and checkout before the time expires.
                There is a limited stock of some items and you will be competing against the in-house NPC shopping-bot.
                If the value of your cart exceeds the value of the shopping-bot's cart, you win a visual prize!
            </p>
        </section>

        <div class="container-row">
            <img src="~/images/cartoon1.jpg" alt="cartoon" class="cartoon">
            <div id="btn-grp-wrapper">
                <div class="btn-grp">
                    <div id="whiteClockWrapperId" class="whiteClockWrapper btn-grp-item">
                        <div class="innerWhiteClockWrapper">
                            <span id="countdownClockWhiteBg"></span>
                        </div>
                    </div>

                    <div class="btn-grp-item">
                        @Html.ActionLink(linkText: "Continue", actionName: "List", controllerName: "Product", routeValues: null, htmlAttributes: new { @class = "btn btn-primary continuebtn" })
                    </div>

                    <div class="btn-grp-item">
                        @Html.ActionLink(linkText: "Start", actionName: "Restart", controllerName: "Product", routeValues: null, htmlAttributes: new { @class = "btn btn-primary startbtn" })
                    </div>
                </div>
            </div>
        </div>


        <div class="landing-content">
            <h3>Game Instructions</h3>
            <ul>
                <li>
                    Use the Plus (<span class="fa fa-plus" style="font-size:14px"></span>) and Update buttons in combination to add items to your cart.
                </li>
                <li>Only items in stock can be added, and there is a limit per item line.</li>
                <li>Click Checkout before the time expires.</li>
            </ul>

            <h3>Hints and Tips</h3>
            <ul>
                <li>Add high-value items as soon as you see them (the NPC shopping-bot competes for these items).</li>
                <li>The ability to remove items from your cart is available for demo, but has no purpose in the game.</li>
                <li>You can inspect your cart at any time. A summary of the shopping-bot's cart value is also shown.</li>
                <li>If you checkout early, the game will simulate the shopping-bot completing their turn.</li>
                <li>You can continue shopping after the time expires, but then the game is lost on checkout.</li>
                <li>So long as you checkout within the available time on your browser, the game allows for a (short) delay in connecting to the game server.</li>
            </ul>

            <!-- #region discussion and credits -->
            <div class="toggle-button-container">
                <input type="button" id="toggleDiscBut" class="btn btn-info" value="Show Tech Discussion" onclick="ShowHideDiscussion()" />
            </div>
            <section class="tech-discussion" style="display:none;">
                <h3>Game Discussion</h3>
                <p>
                    View source on <a href="https://github.com/Sajeewa-Dissa/mynoddy-supermarket-sweep">Github <span class="fa fa-github" style="font-size:24px"></span></a>.
                </p>

                <p>This shopping game consists of this landing page, two in-game pages created using the MVC architecture and a simple results page.</p>
                <p>
                    The online store created here is based on an example in <cite>Pro ASP.NET MVC 5</cite> by Adam Freeman 2013. This is an example of a simple Repository pattern to add items to a cart in an online store.
                    It uses Bootstrap v3 classes to style elements for display as well as showing some output as pure HTML tables. The original example also made extensive use of the Bootstrap classes for responsive layout and also for creating
                    flexbox layouts with the Bootstrap page structure. Those extra features have been removed from this website.
                </p>
                <p>
                    Also removed from this example is the use of a database context, for the reasons detailed below.
                    This example has also replaced Ninject with MS Unity as the Dependency Injector (DI) package.
                </p>
                <p>
                    The code makes use of the fundementals of C# MVC; the use of Entity Framework context objects, object-model binding for persisting data across HTTP calls, paging classes to aid in navigation and routing,
                    utility classes for the numerous helper-methods required and a number of view-models to be sent to pages and partial pages.
                </p>

                <h4>Our changes to the original design</h4>
                <p>
                    The original design used a simple Repository pattern that adds one item at a time, unsuitable for our needs.
                    The design also used a SQL Server Database context in which the products for sale were listed in a simple table.
                    However, it lacked any concept of a stock-count from which items could be subtracted.
                </p>
                <p>
                    Hosting a database would imply a cost, so for this game, we have a context object which creates an in-memory list of products with extra properties on demand. The new properties added allow the management of stock-counts.
                    The repository pattern has been updated to add multiple items  to the shopping cart per request, via new plus/minus buttons to complement the Update button on-screen. A number of client-side messages also display via Javascript fade-in and fade-out to 
                    give the user a richer interactive experience when they are using these controls.
                </p>


                todo AJAX comment
                todo spell check this page.

                <p>fjsdh sdhfj dsksjdh fkhs dfksdkh</p>



                <h4>Creating an In-Proc thread to </h4>

                <h4>Extending the game to multi-player</h4>
                <p>fjsdh sdhfj dsksjdh fkhs dfksdkh</p>


                <h4>Coding an AI behaviour</h4>
                <p>fjsdh sdhfj dsksjdh fkhs dfksdkh</p>





            </section>
            <div class="toggle-button-container">
                <input type="button" id="toggleCredBut" class="btn btn-info" value="Show Game Credits" onclick="ShowHideCredits()" />
            </div>
            <section class="game-credits" style="display:none;">
                <h3>Game Credits</h3>
                <p>The online store created by the game is based on an example in <cite>Pro ASP.NET MVC 5</cite> by Adam Freeman 2013, published by <a href="https://www.apress.com/gp/book/9781430265290">APRESS</a>.</p>

                <p>The win-condition animation on the results screen is based on <cite>sketch.js</cite> and its associated worked-example by Justin Windle. The Codepen is linked <a href="https://codepen.io/soulwire/pen/foktm">here</a>.</p>
             </section>
            <!-- #endregion -->
        </div>

</main>
    <footer>
        <p>&copy; Sajeewa Dissanayake 2019. Made with ❤ and Visual Studio.</p>
    </footer>


    <script>
    var countdownCtrl = document.getElementById("countdownClockWhiteBg");
    var countdownCtrlBorder = document.getElementsByClassName("innerWhiteClockWrapper")[0];
    var startButton = document.getElementsByClassName("startbtn")[0];
    var continueButton = document.getElementsByClassName("continuebtn")[0];

    var toggleDiscButton = document.getElementById("toggleDiscBut");
    var discSection = document.getElementsByClassName("tech-discussion")[0];
    var toggleCredButton = document.getElementById("toggleCredBut");
    var credSection = document.getElementsByClassName("game-credits")[0];

    var inGameFlag = @ViewBag.inGame;

    //if still in a game (navigated here while within game), then allow option to restart or continue. Also show countdown timer.
    if (inGameFlag == 0) {
        startButton.innerHTML = "Start Game";
        continueButton.style.display = "none";
        countdownCtrl.style.display = "none";
        countdownCtrlBorder.style.display = "none";
    }
    else {
        startButton.innerHTML = "Restart";
        continueButton.style.display = "";
        countdownCtrl.style.display = "";
        countdownCtrlBorder.style.display = "";
    }

    var remaining = @ViewBag.remainingTime;

    var countDownDate = new Date();
    countDownDate.setMilliseconds(countDownDate.getMilliseconds() + remaining);

    // Update the countdown immediately and then every quarter of a second (otherwise it lags between page refresh and redirects)
    RunCountdown();
    var xInterval = setInterval(RunCountdown, 250);

    function RunCountdown() { //tbc add this as a central script.
        // Get todays date and time
        var now = new Date().getTime();

        // Find the duration between now and the count down date
        var duration = countDownDate - now;

        // Time calculations for days, hours, minutes and seconds
        //var days = Math.floor(duration / (1000 * 60 * 60 * 24));
        //var hours = Math.floor((duration % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
        //var minutes = Math.floor((duration % (1000 * 60 * 60)) / (1000 * 60));
        var seconds = Math.floor((duration % (1000 * 60)) / 1000);
        var formattedSeconds = seconds.toString().padStart(2, '0');

        // Display the result in the element with id="demo"
        countdownCtrl.innerHTML = formattedSeconds;

        // If the count down is finished, cancel the countdown
        if (duration < 0) {
            clearInterval(xInterval);
            countdownCtrl.innerHTML = "00";
        }
            }

    function ShowHideDiscussion() {

        if (toggleDiscButton.value == "Show Tech Discussion") {
            toggleDiscButton.value = "Hide Tech Discussion";
            discSection.style.display = "";
        }
        else {
            toggleDiscButton.value = "Show Tech Discussion";
            discSection.style.display = "none";
        }
    }

    function ShowHideCredits() {

        if (toggleCredButton.value == "Show Game Credits") {
            toggleCredButton.value = "Hide Game Credits";
            credSection.style.display = "";
        }
        else {
            toggleCredButton.value = "Show Game Credits";
            credSection.style.display = "none";
        }
    }

    </script>
</body>
</html>