
@using MyNoddyStore.Entities
@model MyNoddyStore.Models.ProductsListViewModel
@Scripts.Render("~/Scripts/jquery-3.3.1.js")
@*@Scripts.Render("/Scripts/incrementing.js")*@
@{
    ViewBag.Title = "Products";
}
@foreach (var pr in Model.Products)
{
    //@Html.Partial("ProductSummary", pr)
    @Html.Partial("ProductSummary", pr, new ViewDataDictionary { {"pageNumber", Model.PagingInfo.CurrentPage },
                                                                 {"categoryString", Model.CurrentCategory }}      ) //we are adding the current page and category to each partial view
}
    <div class="btn-group pull-right">
        @Html.PageLinks(Model.PagingInfo, x => Url.Action("List", new { category = Model.CurrentCategory, page = x }))
    </div>
    <div>
        <p id="demo"></p>
    </div>

    @*This script manipulates items on the page. Whereas it may seem more pertinent to add this script per ProductSummary partial-view form, in practice 
        this causes issues with multiple events being bound to the forms (one for each time a form is loaded) *@
    <script type="text/javascript">
    var modelProducts; // initial products in cart
    var countdownVal;

    $('.plus-btn').on('click', function (e) {
        e.preventDefault();
        var $this = $(this);
        var $input = $this.closest('div').find('input');
        var value = parseInt($input.val());

        var thisProdId = GetProductId($this);

        var currentStock = GetCurrentStock(thisProdId);
        var myQuantity = GetMyQuantity(thisProdId);

        if (value < 5) {        // max quantity value allowed is 5
            //add up to the available stock only
            if (value - myQuantity < currentStock) {
                value = value + 1;
            }
        } else {
            value = 5;
        }

        $input.val(value);

        ResetLocalUpdateButton($this);
    });


    $('.minus-btn').on('click', function (e) {
        e.preventDefault();
        var $this = $(this);
        var $input = $this.closest('div').find('input');
        var value = parseInt($input.val());

        if (value > 1) {        // min quantity value allowed is 0
            value = value - 1;
        } else {
            value = 0;
        }

        $input.val(value);

        ResetLocalUpdateButton($this);
    });


    //Set local Update button to be enabled/disabled as necessary.
    function ResetLocalUpdateButton(localElement) {

        var currentQuantity = parseInt(localElement.closest('div').find('input').val()); //this is the number of items now selected. 
        var thisProdId = GetProductId(localElement);
        var cartQuantity = modelProducts.find(x => x.ProductID == thisProdId).MyQuantity; //this is the number of items in cart model originally.

        var thisUpdateButton = localElement.closest('div').siblings().children().find("input[name='submitUpdate']");

        //if current quantity differs from the original value, then the cart value needs to be updated - otherwise the update button should be disabled.
        if (currentQuantity == cartQuantity) {
            $(thisUpdateButton).attr('disabled', true);
            //$(thisUpdateButton).prop('disabled', true);   //boolean [attr]ibutes and [prop]erties are treated similarly in JQuery. So this code also works.
        } else {
            $(thisUpdateButton).removeAttr('disabled');
            //thisUpdateButton.removeAttr('disabled');     //we could call the JQuery method on a Js element directly. This code also works
        }
    }

    function GetProductId(localElement) {
        return localElement.closest('div').siblings().children().find("input[name='ProductID']").val();
    }

    function GetCurrentStock(ProductId) {
        return modelProducts.find(x => x.ProductID == ProductId).StockCount;
    }

    function GetMyQuantity(ProductId) {
        return modelProducts.find(x => x.ProductID == ProductId).MyQuantity;
    }

    function UpdateCountdownVal() {
            var countdownCtrl = document.getElementById("demo");
            countdownCtrl.innerHTML = countdownVal;
        }

    //For each Update button on screen, set the initial state to disabled.
    function DisableAllUpdateButtons() {
        var buttons = document.getElementsByName("submitUpdate");
        var i;
        for (i = 0; i < buttons.length; i++) {
            //if (x[i].type == "checkbox") {
            //    x[i].checked = true;
            //}
            buttons[i].disabled = true;
        }
        }

    $(document).ready(function () {
        @*var myObj =  @Html.Raw(Json.Encode(Model));
        MyTestFunc('hello');*@

        countdownVal = @Html.Raw(Model.CountDownMilliseconds);

        modelProducts =  @Html.Raw(Json.Encode(Model.Products));

        DisableAllUpdateButtons();

        UpdateCountdownVal();

        @*countdownVal = '@ViewBag.remainingTime';*@                

    });



    function MyTestFunc(string1) {
        console.log(string1);
    }

    </script>

    @*
        <script>
          $(document).ready(function () {
            $("#btnSave").click(function () {
                $("form").attr("action", "/Customer/Save");
            });
            $("#btnSaveForLatter").click(function () {
                $("form").attr("action", "/Customer/SaveForLater");
            });
            $("#btnSaveAndPublish").click(function () {
                $("form").attr("action", "/Customer/SaveAndPublish");
            });
          });
        </script>


    *@


